// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Producto {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(20)
  info        String    @default("") @db.VarChar(255)
  precio      Float     @default(0.0)
  stock       Int       @default(0)
  estado      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pedidos     Pedido[]
  marcaId     Int
  marca       Marca     @relation(fields: [marcaId], references: [id])
  categoriaId Int
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: NoAction)
  proveedorId Int
  proveedor   Proveedor @relation(fields: [proveedorId], references: [id])

  @@index([marcaId], map: "productos_marca_fkey")
  @@index([categoriaId], map: "productos_categoria_fkey")
  @@index([proveedorId], map: "productos_proveedor_fkey")
  @@map("productos")
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(20)
  info      String     @default("") @db.VarChar(255)
  estado    Boolean    @default(true)
  productos Producto[]

  @@map("categorias")
}

model Marca {
  id          Int         @id @default(autoincrement())
  nombre      String      @db.VarChar(20)
  info        String      @default("") @db.VarChar(255)
  estado      Boolean     @default(true)
  proveedores Proveedor[]
  productos   Producto[]

  @@map("marcas")
}

model Cliente {
  id       Int     @id @default(autoincrement())
  nombre   String  @db.VarChar(20)
  info     String  @default("") @db.VarChar(255)
  estado   Boolean @default(true)
  email    String? @unique
  telefono String? @unique
  saldo    Float   @default(0.0)
  ventas   Venta[]
  cobros   Cobro[]

  @@map("clientes")
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(20)
  info      String     @default("") @db.VarChar(255)
  estado    Boolean    @default(true)
  email     String?    @unique
  telefono  String?    @unique
  saldo     Float      @default(0.0)
  marcas    Marca[]
  productos Producto[]
  pagos     Pago[]
  compras   Compra[]

  @@map("proveedores")
}

model Compra {
  id        Int      @id @default(autoincrement())
  fecha     DateTime @default(now())
  info      String   @default("") @db.VarChar(255)
  estado    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total     Float    @default(0.0)
  saldo     Float    @default(0.0)

  proveedorId Int
  proveedor   Proveedor @relation(fields: [proveedorId], references: [id], map: "Compra_proveedor_fkey")
  pedidos     Pedido[]
  pagos       Pago[]

  @@index([proveedorId], map: "Compra_proveedorId_fkey")
  @@map("compras")
}

model Venta {
  id        Int      @id @default(autoincrement())
  fecha     DateTime @default(now())
  info      String   @default("") @db.VarChar(255)
  estado    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  total     Float    @default(0.0)
  saldo     Float    @default(0.0)

  clienteId Int
  cliente   Cliente  @relation(fields: [clienteId], references: [id], map: "Venta_cliente_fkey")
  pedidos   Pedido[]
  cobros    Cobro[]

  @@index([clienteId], map: "Venta_clienteId_fkey")
  @@map("ventas")
}

model Pedido {
  id         Int      @id @default(autoincrement())
  cantidad   Int
  precio     Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  ventaId    Int?
  venta      Venta?   @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  compraId   Int?
  compra     Compra?  @relation(fields: [compraId], references: [id], onDelete: Cascade)

  @@index([productoId], map: "Pedido_productoId_fkey")
  @@map("pedidos")
}

model Caja {
  id            Int              @id @default(autoincrement())
  tipo          TipoCaja         @default(Efectivo)
  nombre        String           @db.VarChar(20)
  saldo         Float            @default(0.0)
  estado        Boolean          @default(true)
  fechaApertura DateTime         @default(now())
  fechaCierre   DateTime?
  movimientos   CajaMovimiento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cajas")
}

enum TipoCaja {
  Efectivo
  Electronico
  Otra
}

model CajaMovimiento {
  id      Int            @id @default(autoincrement())
  fecha   DateTime       @default(now())
  tipo    TipoMovimiento
  importe Float          @default(0.0)
  info    String         @default("") @db.VarChar(255)

  cajaId Int?
  caja   Caja? @relation(fields: [cajaId], references: [id])

  // One-to-one relationship between CajaMovimiento-Pago
  pago Pago?

  // One-to-one relationship between CajaMovimiento-Cobro
  cobro Cobro?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cajas_movimientos")
}

enum TipoMovimiento {
  Pago
  Cobro
  Iterno_Pago
  intero_Cobro
}

model Pago {
  id    Int      @id @default(autoincrement())
  fecha DateTime @default(now())

  proveedorId Int
  proveedor   Proveedor @relation(fields: [proveedorId], references: [id])
  compraId    Int?
  compra      Compra?   @relation(fields: [compraId], references: [id])

  movimientoId Int?            @unique
  movimiento   CajaMovimiento? @relation(fields: [movimientoId], references: [id])

  @@map("pagos")
}

model Cobro {
  id    Int      @id @default(autoincrement())
  fecha DateTime @default(now())

  clienteId Int
  cliente   Cliente @relation(fields: [clienteId], references: [id])
  ventaId   Int?
  venta     Venta?  @relation(fields: [ventaId], references: [id])

  movimientoId Int?            @unique
  movimiento   CajaMovimiento? @relation(fields: [movimientoId], references: [id])

  @@map("cobros")
}
